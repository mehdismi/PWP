openapi: 3.0.3
info:
  title: Network Scanner API
  version: 1.0.0
  description: API for user and scan operations
paths:
  /api/v1/accounts/activity/:
    get:
      operationId: v1_accounts_activity_list
      description: Returns a list of activity logs for the authenticated user.
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityLog'
          description: ''
  /api/v1/accounts/logout/:
    post:
      operationId: v1_accounts_logout_create
      description: Logout the current user by blacklisting the refresh token.
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/accounts/profile/{id}/:
    get:
      operationId: v1_accounts_profile_retrieve
      description: View to retrieve, update or delete the authenticated user's profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: v1_accounts_profile_update
      description: View to retrieve, update or delete the authenticated user's profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: v1_accounts_profile_partial_update
      description: View to retrieve, update or delete the authenticated user's profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: v1_accounts_profile_destroy
      description: View to retrieve, update or delete the authenticated user's profile.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/scans/:
    get:
      operationId: v1_scans_list
      description: ViewSet for managing scans.
      parameters:
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scan'
          description: ''
    post:
      operationId: v1_scans_create
      description: Create scan asynchronously. Returns 202 and a status URL to poll.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScanRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScanRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: /api/v1/scans/42/status/
              examples:
                Accepted:
                  value:
                    url: /api/v1/scans/42/status/
          description: Accepted. Poll status URL.
  /api/v1/scans/{id}/:
    get:
      operationId: v1_scans_retrieve
      description: ViewSet for managing scans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
          description: ''
    put:
      operationId: v1_scans_update
      description: ViewSet for managing scans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScanRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScanRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
          description: ''
    delete:
      operationId: v1_scans_destroy
      description: ViewSet for managing scans.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/scans/{id}/result/:
    get:
      operationId: v1_scans_result_retrieve
      description: Get final scan result when ready.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  summary:
                    type: object
                  findings:
                    type: array
                    items:
                      type: object
                  raw:
                    type: string
          description: ''
        '404':
          description: Not found or result not ready
  /api/v1/scans/{id}/status/:
    get:
      operationId: v1_scans_status_retrieve
      description: Get current processing status for a scan.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                    - pending
                    - running
                    - completed
                    - failed
                  progress:
                    type: number
                    format: float
                  result:
                    type: string
                    nullable: true
                    example: /api/v1/scans/42/result/
                  error:
                    type: string
                    nullable: true
          description: ''
        '404':
          description: Scan not found
  /api/v1/scans/dashboard/summary/:
    get:
      operationId: v1_scans_dashboard_summary_retrieve
      description: Return a summary of all scans for the authenticated user.
      tags:
      - v1
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/token/:
    post:
      operationId: v1_token_create
      description: Custom JWT login view that includes user info in response.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomTokenObtainPairRequest'
        required: true
      security:
      - BearerAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/token/refresh/:
    post:
      operationId: v1_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    ActivityLog:
      type: object
      description: Serializer for user activity logs.
      properties:
        id:
          type: integer
          readOnly: true
        action:
          type: string
          maxLength: 255
        timestamp:
          type: string
          format: date-time
          readOnly: true
      required:
      - action
      - id
      - timestamp
    CustomTokenObtainPairRequest:
      type: object
      description: Extend token serializer to include user data in response.
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    PatchedUserRequest:
      type: object
      description: Serializer for displaying user profile.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
    Scan:
      type: object
      description: Serializer for creating, reading, and updating Scan instances.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        target:
          type: string
          maxLength: 255
        scan_type:
          $ref: '#/components/schemas/ScanTypeEnum'
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        result:
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        progress:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        pid:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        user:
          type: integer
          readOnly: true
      required:
      - created_at
      - id
      - name
      - result
      - scan_type
      - status
      - target
      - updated_at
      - user
    ScanRequest:
      type: object
      description: Serializer for creating, reading, and updating Scan instances.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        target:
          type: string
          minLength: 1
          maxLength: 255
        scan_type:
          $ref: '#/components/schemas/ScanTypeEnum'
        progress:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        pid:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
      required:
      - name
      - scan_type
      - target
    ScanTypeEnum:
      enum:
      - host_discovery
      - open_ports
      - os_services
      type: string
      description: |-
        * `host_discovery` - Host Discovery
        * `open_ports` - Open Ports
        * `os_services` - OS, Services, and Version Detection
    StatusEnum:
      enum:
      - pending
      - running
      - completed
      - failed
      type: string
      description: |-
        * `pending` - Pending
        * `running` - Running
        * `completed` - Completed
        * `failed` - Failed
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          minLength: 1
      required:
      - refresh
    User:
      type: object
      description: Serializer for displaying user profile.
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - first_name
      - id
      - last_name
      - username
    UserRequest:
      type: object
      description: Serializer for displaying user profile.
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          minLength: 1
          maxLength: 150
        last_name:
          type: string
          minLength: 1
          maxLength: 150
      required:
      - first_name
      - last_name
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
